### ENVIRONMENT VARIABLES ######################################################
# You'll probably want to overwrite $TITLE and $TITLEID with values specific to
# your project. The other ones can keep the default value just fine

[env]
# Project information
TITLE = "Rust Project"
TITLEID = "RUST00001"
STATIC_DIR = "static"
# Compilation specific
CARGO_TARGET_DIR = "target"
CARGO_OUT_DIR = "${CARGO_TARGET_DIR}/armv7-vita-eabihf/release"
RUST_TARGET_PATH = "${CARGO_TARGET_DIR}"
CC="arm-vita-eabi-gcc"
LINKER = "arm-vita-eabi-gcc"
LINKER_FLAGS = "-Wl,-q"
LINKER_SPECS = "${CARGO_OUT_DIR}/specs"

### BUILD TASKS ################################################################

[tasks.clean-common]
description = "Clean the `common.toml` file from the project directory."
script_runner = "@shell"
script = ["rm -f common.toml"]

[tasks.clean]
dependencies = ["clean-common"]
command = "cargo"
args = ["clean"]

[tasks.default]
alias = "vpk"

[tasks.patch-cc-specs]
description = "Remove default `libc` linkage from the linker specs"
script = [
  '${LINKER} -dumpspecs > "${LINKER_SPECS}"',
  'sed -i "s/%{!shared:%{g*:-lg} %{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p}}//g" "${LINKER_SPECS}"',
  'sed -i "s/crt0%O%s//g" "${LINKER_SPECS}"'
]

[tasks.get-target-specs]
condition = { script = "test ! -f ${RUST_TARGET_PATH}/armv7-vita-eabihf.json" }
linux_script = [
  "curl -SsL https://github.com/vita-rust/common/raw/master/armv7-vita-eabihf.json > armv7-vita-eabihf.json",
]

[tasks.build]
description = "Build the project using `xargo`."
dependencies = ["get-target-specs"]
install_crate = "xargo"
command = "xargo"
args = ["build", "--target=armv7-vita-eabihf", "--release", "-vv"]


### DISTRIBUTION TASKS #########################################################

[tasks.elf]
description = "Build an ELF executable using the PS Vita linker."
dependencies = ["build", "patch-cc-specs"]
script = [
    """
    ${LINKER} ${LINKER_FLAGS} \
        "-specs=${LINKER_SPECS}" \
        -L"${CARGO_OUT_DIR}" \
        -l${CARGO_MAKE_CRATE_FS_NAME} \
        -o${CARGO_OUT_DIR}/${CARGO_MAKE_CRATE_NAME}.elf
    """
]

[tasks.velf]
description = "Build an VELF executable from the obtained ELF file."
dependencies = ["elf"]
script = [
  """
  arm-vita-eabi-strip -g "${CARGO_OUT_DIR}/${CARGO_MAKE_CRATE_NAME}.elf"
  """,
  """
  vita-elf-create \
      "${CARGO_OUT_DIR}/${CARGO_MAKE_CRATE_NAME}.elf" \
      "${CARGO_OUT_DIR}/${CARGO_MAKE_CRATE_NAME}.velf"
  """
]

[tasks.eboot-bin]
description = "Build an `eboot.bin` file fromt the obtained VELF file."
dependencies = ["velf"]
script = [
  """
  vita-make-fself -s \
      "${CARGO_OUT_DIR}/${CARGO_MAKE_CRATE_NAME}.velf" \
      "${CARGO_OUT_DIR}/eboot.bin"
  """
]

[tasks.param-sfo]
description = "Build the `param.sfo` manifest using with given TITLE and TITLEID."
script = [
    """
    vita-mksfoex \
        -s TITLE_ID="${TITLEID}" \
        "${TITLE}" \
        "${CARGO_OUT_DIR}/param.sfo"
    """
]

[tasks.asset-list]
script = [
  'mkdir -p ${CARGO_OUT_DIR}',
  'find ${STATIC_DIR} -type f > "${CARGO_OUT_DIR}/assets"'
]


[tasks.vpk]
description = "Build a VPK distribution of the project executable and resources."
dependencies = ["asset-list", "eboot-bin", "param-sfo"]
script = [
  '''
  VITA_PACK_VPK_FLAGS=$(
    set +x;
    while read -r line; do
      echo -n "--add \"$line\"=\"${line#static/}\" ";
    done < "${CARGO_OUT_DIR}/assets"
  )
  ''',
  """
  vita-pack-vpk \
          -s "${CARGO_OUT_DIR}/param.sfo" \
          -b "${CARGO_OUT_DIR}/eboot.bin" \
          ${VITA_PACK_VPK_FLAGS}
          "${CARGO_OUT_DIR}/${CARGO_MAKE_CRATE_NAME}.vpk"
  """
]
